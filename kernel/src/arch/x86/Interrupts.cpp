/*
 * Wrap OS
 * Copyright (C) 2010 Dmitry 'skwee' Kudryavtsev
 *
 * See COPYING file for license
 */
#include <arch/x86/Interrupts.hpp>
#include <arch/x86/Pic.hpp>

namespace wrap{
	namespace arch{

		/* All possible interrupt handlers */
		static intr_handler_t _intrHandlers[interrupt::MaxInterrupts];

		extern "C" void intr_common_handler(interrupt_registers_t regs){
			//if we have such handler, call it
			if(_intrHandlers[regs.intr_num] != 0){
				_intrHandlers[regs.intr_num](regs);
			}else{ //no such handler
				//if this is one of the reserved ISRs
				if(regs.intr_num <= interrupt::MaxReservedIsrs){
					//TODO call fault handle
				}
			}

			//if interrupt was generated by PIC
			if(IS_PIC_INTERRUPT(regs.intr_num)){
				//send eoi to pic
				pic_send_eoi(regs.intr_num);
			}
		}

		void intr_set_handler(uint8t intr_num, intr_handler_t handler){
			_intrHandlers[intr_num] = handler;
		}

	}
}
